import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import StringIO
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar o m√≥dulo
sys.path.append(os.getcwd())

from rnaseq_cluster_ai import RNAseqClusterAI

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="RNA-seq Cluster AI",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo e descri√ß√£o
st.title("üß¨ RNA-seq Cluster AI")
st.markdown("""
Ferramenta interativa para an√°lise de agrupamento de dados de RNA-seq utilizando abordagens de IA.
Carregue seus dados do featureCounts e explore os agrupamentos de suas r√©plicas biol√≥gicas.
""")

# Sidebar para upload e configura√ß√µes
with st.sidebar:
    st.header("üìÅ Entrada de Dados")
    
    # Upload do arquivo de contagens
    counts_file = st.file_uploader(
        "Arquivo de output do featureCounts",
        type=['txt', 'tsv'],
        help="Selecione o arquivo tabular gerado pelo featureCounts"
    )
    
    # Upload do arquivo de metadados (opcional)
    metadata_file = st.file_uploader(
        "Arquivo de metadados (opcional)",
        type=['csv', 'txt'],
        help="CSV com informa√ß√µes das amostras. Primeira coluna deve ser a condi√ß√£o experimental."
    )
    
    st.header("‚öôÔ∏è Par√¢metros de An√°lise")
    
    # Par√¢metros de pr√©-processamento
    n_genes = st.slider(
        "N√∫mero de genes mais vari√°veis",
        min_value=1000,
        max_value=10000,
        value=5000,
        help="Seleciona os genes com maior vari√¢ncia para an√°lise"
    )
    
    # Par√¢metros de redu√ß√£o dimensional
    n_components = st.slider(
        "Componentes principais (PCA)",
        min_value=2,
        max_value=50,
        value=11,
        help="N√∫mero de componentes para redu√ß√£o dimensional"
    )
    
    # Par√¢metros UMAP
    n_neighbors = st.slider(
        "Vizinhos (UMAP)",
        min_value=2,
        max_value=20,
        value=5,
        help="Controla o balanceamento entre estrutura local e global"
    )
    
    min_dist = st.slider(
        "Dist√¢ncia m√≠nima (UMAP)",
        min_value=0.0,
        max_value=1.0,
        value=0.1,
        step=0.05,
        help="Dist√¢ncia m√≠nima entre pontos no espa√ßo embutido"
    )
    
    # Par√¢metros de clusteriza√ß√£o
    min_cluster_size = st.slider(
        "Tamanho m√≠nimo de cluster",
        min_value=2,
        max_value=10,
        value=2,
        help="Par√¢metro do HDBSCAN para o tamanho m√≠nimo de clusters"
    )
    
    # Bot√£o para executar an√°lise
    run_analysis = st.button("‚ñ∂Ô∏è Executar An√°lise", type="primary")

# √Årea principal do aplicativo
if counts_file is not None:
    # Carregar dados
    with st.spinner("Carregando dados..."):
        # Inicializar analisador
        cluster_ai = RNAseqClusterAI(
            n_components=n_components, 
            random_state=42
        )
        
        # Processar dados
        X_scaled = cluster_ai.load_featurecounts_data(
            counts_file, 
            metadata_file,
            n_genes=n_genes
        )
        
        # Mostrar preview dos dados
        st.header("üìä Visualiza√ß√£o dos Dados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Dados de Contagem (Primeiras 5 amostras)")
            st.dataframe(cluster_ai.X.head(), use_container_width=True)
            st.caption(f"Forma dos dados: {cluster_ai.X.shape}")
        
        # Processar metadados se fornecido
        if cluster_ai.metadata is not None:
            with col2:
                st.subheader("Metadados")
                st.dataframe(cluster_ai.metadata, use_container_width=True)
    
    # Executar an√°lise quando o bot√£o for pressionado
    if run_analysis:
        with st.status("Executando an√°lise...", expanded=True) as status:
            # Redu√ß√£o dimensional com PCA
            st.write("Aplicando PCA...")
            X_pca, explained_variance = cluster_ai.apply_pca()
            
            # Redu√ß√£o dimensional com UMAP
            st.write("Aplicando UMAP...")
            X_umap = cluster_ai.apply_umap(
                n_neighbors=n_neighbors,
                min_dist=min_dist
            )
            
            # Treinar autoencoder
            st.write("Treinando autoencoder...")
            autoencoder, encoder = cluster_ai.build_autoencoder(encoding_dim=10)
            X_encoded, history = cluster_ai.train_autoencoder(epochs=50)
            
            # Clusteriza√ß√£o
            st.write("Realizando clusteriza√ß√£o...")
            representations = {
                'PCA': X_pca,
                'UMAP': X_umap,
                'Autoencoder': X_encoded
            }
            
            results = {}
            for name, X_rep in representations.items():
                clusters_kmeans = cluster_ai.cluster_kmeans(X_rep)
                results[f'{name}_Kmeans'] = cluster_ai.evaluate_clusters(clusters_kmeans)
            
            status.update(label="An√°lise conclu√≠da!", state="complete")
        
        # Mostrar resultados
        st.header("üìà Resultados da An√°lise")
        
        # M√©tricas de avalia√ß√£o
        st.subheader("M√©tricas de Avalia√ß√£o")
        results_df = pd.DataFrame(results).T
        st.dataframe(results_df.style.highlight_max(axis=0), use_container_width=True)
        
        # Visualiza√ß√µes
        st.subheader("Visualiza√ß√µes")
        
        # Criar abas para diferentes visualiza√ß√µes
        tab1, tab2, tab3 = st.tabs(["PCA", "UMAP", "Autoencoder"])
        
        with tab1:
            clusters = cluster_ai.cluster_kmeans(X_pca)
            # Pegar a vari√¢ncia explicada dos dois primeiros componentes
            explained_variance_2d = (explained_variance[0], explained_variance[1])
            fig = cluster_ai.visualize_clusters(
                X_pca[:, :2], 
                clusters, 
                title="Clusters baseados em PCA",
                explained_variance=explained_variance_2d
            )
            st.pyplot(fig)
        
        with tab2:
            clusters = cluster_ai.cluster_kmeans(X_umap)
            fig = cluster_ai.visualize_clusters(
                X_umap, 
                clusters, 
                title="Clusters baseados em UMAP"
            )
            st.pyplot(fig)
        
        with tab3:
            clusters = cluster_ai.cluster_kmeans(X_encoded)
            fig = cluster_ai.visualize_clusters(
                X_encoded[:, :2], 
                clusters, 
                title="Clusters baseados em Autoencoder"
            )
            st.pyplot(fig)
        
        # Download dos resultados
        st.subheader("üì• Download dos Resultados")
        
        # Converter resultados para CSV
        csv = results_df.to_csv()
        st.download_button(
            label="Baixar resultados como CSV",
            data=csv,
            file_name="resultados_analise.csv",
            mime="text/csv"
        )
        
else:
    st.info("üëà Por favor, fa√ßa upload de um arquivo de output do featureCounts para iniciar a an√°lise.")
    
    # Se√ß√£o de exemplos (opcional)
    with st.expander("üìã Exemplo de formato dos dados"):
        st.markdown("""
        **Arquivo de contagens (featureCounts):**
        - Formato TSV com as primeiras colunas: Geneid, Chr, Start, End, Strand, Length
        - Colunas seguintes: amostras com contagens de reads
        
        **Arquivo de metadados (opcional):**
        - CSV com amostras na primeira coluna e condi√ß√µes experimentais na segunda coluna
        - Exemplo:
        ```
        Sample,Condition
        Sample1,Treatment
        Sample2,Control
        Sample3,Treatment
        Sample4,Control
        ```
        """)

# Rodap√©
st.markdown("---")
st.caption("RNA-seq Cluster AI - Ferramenta de an√°lise de agrupamento para dados de RNA-seq")